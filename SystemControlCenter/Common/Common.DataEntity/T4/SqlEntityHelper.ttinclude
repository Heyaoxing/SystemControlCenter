<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Data.dll" #>
<#@ assembly name="System.Data.DataSetExtensions.dll" #>
<#@ assembly name="System.Xml.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.IO" #>

 <#+
public class SqlEntityHelper
{
    #region GetEntity

    public static List<Entity> GetEntities(string connectionString, string database, string tables = null)
    {
        var list = new List<Entity>();
        if (!string.IsNullOrEmpty(tables))
        {
            tables = string.Format(" and obj.name in ('{0}')", tables.Replace(",", "','"));
        }

        #region SQL

        var sql = string.Format(@"SELECT
                                    obj.name tablename,
                                    schem.name schemname,
                                    idx.rows,
                                    CAST
                                    (
                                        CASE 
                                            WHEN (SELECT COUNT(1) FROM sys.indexes WHERE object_id= obj.OBJECT_ID AND is_primary_key=1) >=1 THEN 1
                                            ELSE 0
                                        END 
                                    AS BIT) HasPrimaryKey                                         
                                    from {0}.sys.objects obj 
                                    inner join {0}.dbo.sysindexes idx on obj.object_id=idx.id and idx.indid<=1
                                    INNER JOIN {0}.sys.schemas schem ON obj.schema_id=schem.schema_id
                                    where type='U' {1}
                                    order by obj.name", database, tables);

        #endregion

        var dt = GetDataTable(connectionString, sql);
        if (dt != null && dt.Rows.Count > 0)
        {
            foreach (DataRow row in dt.Rows)
            {
                var tableName = row["tablename"].ToString();
                var entityName = StringUtils.ToFirstUpper(StringUtils.ToSingular(tableName));
                var entity = new Entity(entityName, tableName);


                var dbColumns = GetDbColumns(connectionString, database, tableName, row["schemname"].ToString());
                if (dbColumns.Count > 0)
                {
                    foreach (var column in dbColumns)
                    {
                        if (entityName== column.ColumnName)
                        {
							 entity.EntityName=entityName+"s";
                        }
                        var field = new Field
                        {
                            Name = column.ColumnName,
                            Type =  column.CSharpType,
                            Comment = column.Remark.Replace(System.Environment.NewLine, ""),
                            IsPrimaryKey = column.IsPrimaryKey,
                            IsIdentity = column.IsIdentity,
                            IsNotNull = column.IsNullable
                        };
                        if (!entity.Fields.Exists(p=>p.Name==field.Name))
                        {
                            entity.Fields.Add(field);
                        }
                    }
                }


                list.Add(entity);
            }
        }
        return list;
    }

    #endregion

    #region GetDbColumns

    public static List<DbColumn> GetDbColumns(string connectionString, string database, string tableName, string schema = "dbo")
    {
        #region SQL

        var sql = string.Format(@"
                                    WITH indexCTE AS
                                    (
                                        SELECT 
                                        ic.column_id,
                                        ic.index_column_id,
                                        ic.object_id    
                                        FROM {0}.sys.indexes idx
                                        INNER JOIN {0}.sys.index_columns ic ON idx.index_id = ic.index_id AND idx.object_id = ic.object_id
                                        WHERE  idx.object_id =OBJECT_ID(@tableName) AND idx.is_primary_key=1
                                    )
                                    select
                                    colm.column_id ColumnID,
                                    CAST(CASE WHEN indexCTE.column_id IS NULL THEN 0 ELSE 1 END AS BIT) IsPrimaryKey,
                                    colm.name ColumnName,
                                    systype.name ColumnType,
                                    colm.is_identity IsIdentity,
                                    colm.is_nullable IsNullable,
                                    cast(colm.max_length as int) ByteLength,
                                    (
                                        case 
                                            when systype.name='nvarchar' and colm.max_length>0 then colm.max_length/2 
                                            when systype.name='nchar' and colm.max_length>0 then colm.max_length/2
                                            when systype.name='ntext' and colm.max_length>0 then colm.max_length/2 
                                            else colm.max_length
                                        end
                                    ) CharLength,
                                    cast(colm.precision as int) Precision,
                                    cast(colm.scale as int) Scale,
                                    prop.value Remark
                                    from {0}.sys.columns colm
                                    inner join {0}.sys.types systype on colm.system_type_id=systype.system_type_id and colm.user_type_id=systype.user_type_id
                                    left join {0}.sys.extended_properties prop on colm.object_id=prop.major_id and colm.column_id=prop.minor_id
                                    LEFT JOIN indexCTE ON colm.column_id=indexCTE.column_id AND colm.object_id=indexCTE.object_id                                        
                                    where colm.object_id=OBJECT_ID(@tableName)
                                    order by colm.column_id", database);

        #endregion

        var param = new SqlParameter("@tableName", SqlDbType.NVarChar, 100)
        {
            Value = string.Format("{0}.{1}.{2}", database, schema, tableName)
        };
        var dt = GetDataTable(connectionString, sql, param);
        return dt.Rows.Cast<DataRow>().Select(row => new DbColumn
        {
            ColumnID = row.Field<int>("ColumnID"),
            IsPrimaryKey = row.Field<bool>("IsPrimaryKey"),
            ColumnName = row.Field<string>("ColumnName"),
            ColumnType = row.Field<string>("ColumnType"),
            IsIdentity = row.Field<bool>("IsIdentity"),
            IsNullable = row.Field<bool>("IsNullable"),
            ByteLength = row.Field<int>("ByteLength"),
            CharLength = row.Field<int>("CharLength"),
            Scale = row.Field<int>("Scale"),
            Remark = row["Remark"].ToString()
        }).ToList();
    }

    #endregion

    #region GetDataTable

    public static DataTable GetDataTable(string connectionString, string commandText, params SqlParameter[] parms)
    {
        using (var connection = new SqlConnection(connectionString))
        {
            var command = connection.CreateCommand();
            command.CommandText = commandText;
            command.Parameters.AddRange(parms);
            var adapter = new SqlDataAdapter(command);

            var dt = new DataTable();
            adapter.Fill(dt);

            return dt;
        }
    }

    #endregion
}


public class Entity
{
    public Entity()
    {
        Fields = new List<Field>();
    }

    public Entity(string name, string tableName) : this()
    {
        EntityName = name;
        TableName = tableName;
    }

    public string TableName { get; set; }
    public string EntityName { get; set; }
    public List<Field> Fields { get; set; }
}

public class Field
{
    public bool IsPrimaryKey { get; set; }
    public bool IsIdentity { get; set; }
    public bool IsNotNull { get; set; }
    public string Name { get; set; }
    public string Type { get; set; }
    public string Comment { get; set; }
}

#region DbColumn

/// <summary>
///     表字段结构
/// </summary>
public sealed class DbColumn
{
    /// <summary>
    ///     字段ID
    /// </summary>
    public int ColumnID { get; set; }

    /// <summary>
    ///     是否主键
    /// </summary>
    public bool IsPrimaryKey { get; set; }

    /// <summary>
    ///     字段名称
    /// </summary>
    public string ColumnName { get; set; }

    /// <summary>
    ///     字段类型
    /// </summary>
    public string ColumnType { get; set; }

    /// <summary>
    ///     数据库类型对应的C#类型
    /// </summary>
    public string CSharpType
    {
        get { return SqlServerDbTypeMap.MapCsharpType(ColumnType,IsNullable); }
    }

    /// <summary>
    /// </summary>
    public Type CommonType
    {
        get { return SqlServerDbTypeMap.MapCommonType(ColumnType); }
    }

    /// <summary>
    ///     字节长度
    /// </summary>
    public int ByteLength { get; set; }

    /// <summary>
    ///     字符长度
    /// </summary>
    public int CharLength { get; set; }

    /// <summary>
    ///     小数位
    /// </summary>
    public int Scale { get; set; }

    /// <summary>
    ///     是否自增列
    /// </summary>
    public bool IsIdentity { get; set; }

    /// <summary>
    ///     是否允许空
    /// </summary>
    public bool IsNullable { get; set; }

    /// <summary>
    ///     描述
    /// </summary>
    public string Remark { get; set; }
}

#endregion

#region SqlServerDbTypeMap

public class SqlServerDbTypeMap
{
    public static string MapCsharpType(string dbtype,bool isNotNull)
    {
        if (string.IsNullOrEmpty(dbtype)) return dbtype;
        dbtype = dbtype.ToLower();
        var csharpType = "object";
        switch (dbtype)
        {
            case "bigint":
                 csharpType = isNotNull ? "long?":"long";
                break;
            case "binary":
                csharpType = "byte[]";
                break;
            case "bit":
                csharpType = "bool";
                break;
            case "char":
                csharpType = "string";
                break;
            case "date":              
            case "datetime":
            case "datetime2":
                csharpType = isNotNull ? "DateTime?":"DateTime";
                break;
            case "datetimeoffset":
                csharpType = "DateTimeOffset";
                break;
            case "float":
                csharpType = isNotNull ? "double?" : "double";
                break;
            case "image":
                csharpType = "byte[]";
                break;
            case "int":
                csharpType = isNotNull ? "int?": "int";
                break;
            case "money":
			case "numeric":
			case "decimal":      
			case "smallmoney":
                csharpType = isNotNull ?"decimal?":"decimal";
                break;
            case "nchar":               
            case "ntext":  
            case "nvarchar":
                csharpType = "string";
                break;
            case "real":
                csharpType = "Single";
                break;
            case "smalldatetime":
                csharpType =  isNotNull ?"DateTime?":"DateTime";
                break;
            case "smallint":
                csharpType = "short";
                break;
            case "sql_variant":
                csharpType = "object";
                break;
            case "sysname":
                csharpType = "object";
                break;
            case "text":
                csharpType = "string";
                break;
            case "time":
                csharpType = "TimeSpan";
                break;
            case "timestamp":
                csharpType = "byte[]";
                break;
            case "tinyint":
                csharpType = "byte";
                break;
            case "uniqueidentifier":
                csharpType = "Guid";
                break;
            case "varbinary":
                csharpType = "byte[]";
                break;
            case "varchar":             
            case "xml":
                csharpType = "string";
                break;
            default:
                csharpType = "object";
                break;
        }
        return csharpType;
    }

    public static Type MapCommonType(string dbtype)
    {
        if (string.IsNullOrEmpty(dbtype)) return Type.Missing.GetType();
        dbtype = dbtype.ToLower();
        var commonType = typeof(object);
        switch (dbtype)
        {
            case "bigint":
                commonType = typeof(long);
                break;
            case "binary":
                commonType = typeof(byte[]);
                break;
            case "bit":
                commonType = typeof(bool);
                break;
            case "char":
                commonType = typeof(string);
                break;
            case "date":
                commonType = typeof(DateTime);
                break;
            case "datetime":
                commonType = typeof(DateTime);
                break;
            case "datetime2":
                commonType = typeof(DateTime);
                break;
            case "datetimeoffset":
                commonType = typeof(DateTimeOffset);
                break;
            case "decimal":
                commonType = typeof(decimal);
                break;
            case "float":
                commonType = typeof(double);
                break;
            case "image":
                commonType = typeof(byte[]);
                break;
            case "int":
                commonType = typeof(int);
                break;
            case "money":
                commonType = typeof(decimal);
                break;
            case "nchar":
                commonType = typeof(string);
                break;
            case "ntext":
                commonType = typeof(string);
                break;
            case "numeric":
                commonType = typeof(decimal);
                break;
            case "nvarchar":
                commonType = typeof(string);
                break;
            case "real":
                commonType = typeof(float);
                break;
            case "smalldatetime":
                commonType = typeof(DateTime);
                break;
            case "smallint":
                commonType = typeof(short);
                break;
            case "smallmoney":
                commonType = typeof(decimal);
                break;
            case "sql_variant":
                commonType = typeof(object);
                break;
            case "sysname":
                commonType = typeof(object);
                break;
            case "text":
                commonType = typeof(string);
                break;
            case "time":
                commonType = typeof(TimeSpan);
                break;
            case "timestamp":
                commonType = typeof(byte[]);
                break;
            case "tinyint":
                commonType = typeof(byte);
                break;
            case "uniqueidentifier":
                commonType = typeof(Guid);
                break;
            case "varbinary":
                commonType = typeof(byte[]);
                break;
            case "varchar":
                commonType = typeof(string);
                break;
            case "xml":
                commonType = typeof(string);
                break;
            default:
                commonType = typeof(object);
                break;
        }
        return commonType;
    }
}

#endregion

public static class StringUtils
{
    /// <summary>
    ///     单词变成单数形式
    /// </summary>
    /// <param name="word"></param>
    /// <returns></returns>
    public static string ToSingular(string word)
    {
        var plural1 = new Regex("(?<keep>[^aeiou])ies$");
        var plural2 = new Regex("(?<keep>[aeiou]y)s$");
        var plural3 = new Regex("(?<keep>[sxzh])es$");
        var plural4 = new Regex("(?<keep>[^sxzhyu])s$");

        if (plural1.IsMatch(word))
            return plural1.Replace(word, "${keep}y");
        if (plural2.IsMatch(word))
            return plural2.Replace(word, "${keep}");
        if (plural3.IsMatch(word))
            return plural3.Replace(word, "${keep}");
        if (plural4.IsMatch(word))
            return plural4.Replace(word, "${keep}");

        return word;
    }

    /// <summary>
    ///     单词变成复数形式
    /// </summary>
    /// <param name="word"></param>
    /// <returns></returns>
    public static string ToPlural(string word)
    {
        var plural1 = new Regex("(?<keep>[^aeiou])y$");
        var plural2 = new Regex("(?<keep>[aeiou]y)$");
        var plural3 = new Regex("(?<keep>[sxzh])$");
        var plural4 = new Regex("(?<keep>[^sxzhy])$");

        if (plural1.IsMatch(word))
            return plural1.Replace(word, "${keep}ies");
        if (plural2.IsMatch(word))
            return plural2.Replace(word, "${keep}s");
        if (plural3.IsMatch(word))
            return plural3.Replace(word, "${keep}es");
        if (plural4.IsMatch(word))
            return plural4.Replace(word, "${keep}s");

        return word;
    }

    // 将字符串设置成首字母大写
    public static string ToFirstUpper(string field)
    {
        var first = field.Substring(0, 1).ToUpperInvariant();
        var result = first;
        if (field.Length > 1)
        {
            var after = field.Substring(1);
            result = first + after;
        }
        return result;
    }

    // 将字符串设置成首字母大写
    public static string ToFirstLower(string field)
    {
        var first = field.Substring(0, 1).ToLowerInvariant();
        var result = first;
        if (field.Length > 1)
        {
            var after = field.Substring(1);
            result = first + after;
        }
        return result;
    }

    public static string GetEntityName(string name)
    {
        var arr = name.Split('_');
        var result = string.Join("", arr.Select(f => ToFirstUpper(f)));
        return result;
    }
}
 #>